/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * My Web
 * The api my web
 * OpenAPI spec version: 1.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
export type StoryControllerGetStoriesParams = {
limit: unknown;
pageNumber: unknown;
};

export interface Story { [key: string]: any }

export interface CreateStoryDto {
  name: string;
  author?: string;
  content: string;
}

export interface LoginDto {
  username: string;
  password: string;
}

export interface User {
  username: string;
  age: string;
  password: string;
  email: string;
  phoneNumber: string;
  type: string;
}

export type UserRole = typeof UserRole[keyof typeof UserRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  Admin: 'Admin',
  User: 'User',
  Author: 'Author',
} as const;

export interface CreateOneUserDto {
  username: string;
  age: string;
  password: string;
  phoneNumber: string;
  email: string;
  type: UserRole;
}



type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


export const appControllerGetHello = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.default.get(
      `/`,options
    );
  }


export const getAppControllerGetHelloQueryKey = () => [`/`] as const;
  

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = AxiosError<unknown>

export const useAppControllerGetHello = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * Create a user.
 */
export const userControllerCreateOneUser = (
    createOneUserDto: CreateOneUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.default.post(
      `/users`,
      createOneUserDto,options
    );
  }



export const getUserControllerCreateOneUserMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerCreateOneUser>>, TError,{data: CreateOneUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof userControllerCreateOneUser>>, TError,{data: CreateOneUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userControllerCreateOneUser>>, {data: CreateOneUserDto}> = (props) => {
          const {data} = props ?? {};

          return  userControllerCreateOneUser(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UserControllerCreateOneUserMutationResult = NonNullable<Awaited<ReturnType<typeof userControllerCreateOneUser>>>
    export type UserControllerCreateOneUserMutationBody = CreateOneUserDto
    export type UserControllerCreateOneUserMutationError = AxiosError<unknown>

    export const useUserControllerCreateOneUser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerCreateOneUser>>, TError,{data: CreateOneUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUserControllerCreateOneUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * Get all users
 */
export const userControllerGetUsers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User[]>> => {
    return axios.default.get(
      `/users`,options
    );
  }


export const getUserControllerGetUsersQueryKey = () => [`/users`] as const;
  

    
export const getUserControllerGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof userControllerGetUsers>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userControllerGetUsers>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof userControllerGetUsers>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserControllerGetUsersQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerGetUsers>>> = ({ signal }) => userControllerGetUsers({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type UserControllerGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof userControllerGetUsers>>>
export type UserControllerGetUsersQueryError = AxiosError<unknown>

export const useUserControllerGetUsers = <TData = Awaited<ReturnType<typeof userControllerGetUsers>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userControllerGetUsers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUserControllerGetUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * Get a user by userId.
 */
export const userControllerGetDetailUser = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.default.get(
      `/users/${id}`,options
    );
  }


export const getUserControllerGetDetailUserQueryKey = (id: string,) => [`/users/${id}`] as const;
  

    
export const getUserControllerGetDetailUserQueryOptions = <TData = Awaited<ReturnType<typeof userControllerGetDetailUser>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userControllerGetDetailUser>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof userControllerGetDetailUser>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserControllerGetDetailUserQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerGetDetailUser>>> = ({ signal }) => userControllerGetDetailUser(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type UserControllerGetDetailUserQueryResult = NonNullable<Awaited<ReturnType<typeof userControllerGetDetailUser>>>
export type UserControllerGetDetailUserQueryError = AxiosError<unknown>

export const useUserControllerGetDetailUser = <TData = Awaited<ReturnType<typeof userControllerGetDetailUser>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userControllerGetDetailUser>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUserControllerGetDetailUserQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * Get a user current.
 */
export const userControllerGetMe = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.default.get(
      `/users/me`,options
    );
  }


export const getUserControllerGetMeQueryKey = () => [`/users/me`] as const;
  

    
export const getUserControllerGetMeQueryOptions = <TData = Awaited<ReturnType<typeof userControllerGetMe>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userControllerGetMe>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof userControllerGetMe>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserControllerGetMeQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerGetMe>>> = ({ signal }) => userControllerGetMe({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type UserControllerGetMeQueryResult = NonNullable<Awaited<ReturnType<typeof userControllerGetMe>>>
export type UserControllerGetMeQueryError = AxiosError<unknown>

export const useUserControllerGetMe = <TData = Awaited<ReturnType<typeof userControllerGetMe>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userControllerGetMe>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUserControllerGetMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const authControllerLogin = (
    loginDto: LoginDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.default.post(
      `/auth/login`,
      loginDto,options
    );
  }



export const getAuthControllerLoginMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = LoginDto
    export type AuthControllerLoginMutationError = AxiosError<unknown>

    export const useAuthControllerLogin = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getAuthControllerLoginMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const authControllerUser = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.default.get(
      `/auth/isLogin`,options
    );
  }


export const getAuthControllerUserQueryKey = () => [`/auth/isLogin`] as const;
  

    
export const getAuthControllerUserQueryOptions = <TData = Awaited<ReturnType<typeof authControllerUser>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerUser>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof authControllerUser>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthControllerUserQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerUser>>> = ({ signal }) => authControllerUser({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type AuthControllerUserQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerUser>>>
export type AuthControllerUserQueryError = AxiosError<unknown>

export const useAuthControllerUser = <TData = Awaited<ReturnType<typeof authControllerUser>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerUser>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAuthControllerUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const storyControllerCreateStory = (
    createStoryDto: CreateStoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.default.post(
      `/stories`,
      createStoryDto,options
    );
  }



export const getStoryControllerCreateStoryMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof storyControllerCreateStory>>, TError,{data: CreateStoryDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof storyControllerCreateStory>>, TError,{data: CreateStoryDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof storyControllerCreateStory>>, {data: CreateStoryDto}> = (props) => {
          const {data} = props ?? {};

          return  storyControllerCreateStory(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type StoryControllerCreateStoryMutationResult = NonNullable<Awaited<ReturnType<typeof storyControllerCreateStory>>>
    export type StoryControllerCreateStoryMutationBody = CreateStoryDto
    export type StoryControllerCreateStoryMutationError = AxiosError<unknown>

    export const useStoryControllerCreateStory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof storyControllerCreateStory>>, TError,{data: CreateStoryDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getStoryControllerCreateStoryMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * Get list story.
 */
export const storyControllerGetStories = (
    params: StoryControllerGetStoriesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Story>> => {
    return axios.default.get(
      `/stories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getStoryControllerGetStoriesQueryKey = (params: StoryControllerGetStoriesParams,) => [`/stories`, ...(params ? [params]: [])] as const;
  

    
export const getStoryControllerGetStoriesQueryOptions = <TData = Awaited<ReturnType<typeof storyControllerGetStories>>, TError = AxiosError<unknown>>(params: StoryControllerGetStoriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storyControllerGetStories>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof storyControllerGetStories>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStoryControllerGetStoriesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof storyControllerGetStories>>> = ({ signal }) => storyControllerGetStories(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type StoryControllerGetStoriesQueryResult = NonNullable<Awaited<ReturnType<typeof storyControllerGetStories>>>
export type StoryControllerGetStoriesQueryError = AxiosError<unknown>

export const useStoryControllerGetStories = <TData = Awaited<ReturnType<typeof storyControllerGetStories>>, TError = AxiosError<unknown>>(
 params: StoryControllerGetStoriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storyControllerGetStories>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getStoryControllerGetStoriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const storyControllerGetDetailStory = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.default.get(
      `/stories/${id}`,options
    );
  }


export const getStoryControllerGetDetailStoryQueryKey = (id: string,) => [`/stories/${id}`] as const;
  

    
export const getStoryControllerGetDetailStoryQueryOptions = <TData = Awaited<ReturnType<typeof storyControllerGetDetailStory>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storyControllerGetDetailStory>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof storyControllerGetDetailStory>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStoryControllerGetDetailStoryQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof storyControllerGetDetailStory>>> = ({ signal }) => storyControllerGetDetailStory(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type StoryControllerGetDetailStoryQueryResult = NonNullable<Awaited<ReturnType<typeof storyControllerGetDetailStory>>>
export type StoryControllerGetDetailStoryQueryError = AxiosError<unknown>

export const useStoryControllerGetDetailStory = <TData = Awaited<ReturnType<typeof storyControllerGetDetailStory>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storyControllerGetDetailStory>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getStoryControllerGetDetailStoryQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


